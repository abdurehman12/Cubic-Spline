# -*- coding: utf-8 -*-
"""Cubic Spline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1le3pdT7HOQFNdkb0hlCjsAFcO2WzlQnO
"""

from math import exp as e
from math import cos as cos
import numpy as np
import pandas as pd
import math
from sympy import *
from math import *
from __future__ import division
from sympy import *
import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import lagrange
from scipy.interpolate import splrep
from scipy import interpolate

fx = '(exp(x) + 2**-x+ 2*cos(x) - 6)'
f= lambda x: eval(fx)
interval_start= input("enter starting point: ")
interval_end= input("enter ending point: ")
n= int(input("enter n: "))
x=[]
y_values=[]
difference= (int(interval_end) - int(interval_start))/int(n)
for i in range(n+1):
  x.append(int(interval_start) + i*difference)
for i in x:
  y_values.append(f(i))


c_s=splrep(x,y_values,s=0)
ynew = interpolate.splev(x, c_s, der=0)
print(c_s)
print(ynew)
E=y_values-ynew
plt.plot(x,ynew, 'bo-', label='Langrange')
'''plt.plot(x,y_values,'gs-',  label='F(x)')'''
'''plt.plot(x,E,'ro-',  label='error')'''
plt.title("Cubic Spline")
plt.xlabel("X values")
plt.ylabel("F(x)")
plt.show()

1x = np.arange(0, 2*np.pi+np.pi/4, 2*np.pi/8)
y = np.sin(x)
tck = interpolate.splrep(x, y, s=0)
print(tck)
xnew = np.arange(0, 2*np.pi, np.pi/50)
ynew = interpolate.splev(xnew, tck, der=0)
print(ynew)
plt.figure()
plt.plot(x, y, 'x', xnew, ynew, xnew, np.sin(xnew), x, y, 'b')
plt.legend(['Linear', 'Cubic Spline', 'True'])
plt.axis([-0.05, 6.33, -1.05, 1.05])
plt.title('Cubic-spline interpolation')
plt.show()

